import streamlit as st
import pandas as pd
import numpy as np
import pickle
import traceback

st.set_page_config(page_title="🚚 Delivery Time Predictor", page_icon="🚚")

@st.cache_resource
def load_model():
    try:
        with open('simple_delivery_model.pkl', 'rb') as file:
            return pickle.load(file)
    except Exception as e:
        st.error(f"❌ Error loading model: {str(e)}")
        st.error("Full error:")
        st.code(traceback.format_exc())
        return None

def main():
    st.title("🚚 Delivery Time Predictor")
    
    # Load model
    model_package = load_model()
    if model_package is None:
        st.error("Failed to load model")
        st.stop()
    
    st.success(f"✅ {model_package['model_type']} loaded successfully!")
    
    # Show performance
    perf = model_package['performance']
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("RMSE", f"{perf['rmse']:.1f} min")
    with col2:
        st.metric("MAE", f"{perf['mae']:.1f} min")  
    with col3:
        st.metric("R² Score", f"{perf['r2']:.3f}")
    
    st.sidebar.header("📋 Order Details")
    
    # Simple inputs matching your model features
    inputs = {}
    for col in model_package['feature_columns']:
        if 'Age' in col:
            inputs[col] = st.sidebar.slider(f"{col}", 18, 65, 30)
        elif 'Rating' in col:
            inputs[col] = st.sidebar.slider(f"{col}", 1.0, 5.0, 4.0, 0.1)
        elif 'distance' in col.lower():
            inputs[col] = st.sidebar.slider(f"{col}", 0.1, 50.0, 5.0, 0.1)
        else:
            # Use median as default
            median_val = model_package['feature_stats'][col]['median']
            inputs[col] = st.sidebar.slider(f"{col}", 0, 100, int(median_val))
    
    if st.button("🚀 Predict Delivery Time"):
        try:
            # Create input DataFrame
            input_df = pd.DataFrame([inputs])
            
            # Make prediction
            prediction = model_package['model'].predict(input_df)[0]
            
            st.success(f"⏱️ **Estimated Delivery Time: {prediction:.1f} minutes**")
            
            if prediction <= 30:
                st.success("🟢 Fast delivery!")
            elif prediction <= 60:
                st.warning("🟡 Standard delivery")
            else:
                st.error("🔴 Longer delivery time expected")
                
        except Exception as e:
            st.error(f"❌ Prediction error: {str(e)}")
            st.code(traceback.format_exc())

if __name__ == "__main__":
    main()
